# // 功能： 加载配置文件的单例类
# // 描述： 配置文件解析说明
    # // 1. 以 "#" 开头的行作为注释
    # // 2. 以 "[" 开头的行作为注释
    # // 3. 以 "{" 开头的行作为注释
    # // 4. 以 "}" 开头的行作为注释
    # // 5. 每一行前后空格会被忽略
    # // 6. 空行会被忽略
    # // 7. 参数设置格式为: 设置名=参数 
    # // 8. 参数行后面的 "#" 之后的作为注释
    # // 9. '\#' 代表 #
    # // 10. location 开头的表示一个静态资源映射地址
    # //     10.1 ~* 执行正则匹配，但不区分大小写 （四元组） location ~* pattern path
    # //     10.2 ~ 执行正则匹配，区分大小写 （四元组） location ~ pattern path
    # //     10.3 = 执行完全匹配 （四元组） location = pattern path
    # //     10.4 / 所有匹配  （三元组） location / path
    # //     10.5 ^~ 前缀匹配 （四元组）location ^~ pattern path
    # // 11. location 开头的表示一个RestFul API
    # //     11.1 ~* 执行正则匹配，但不区分大小写 （五元组） location ~* pattern API func
    # //     11.2 ~ 执行正则匹配，区分大小写 （五元组） location ~ pattern API func
    # //     11.3 = 执行完全匹配 （五元组） location = pattern API func
    # //     11.4 / 所有匹配  （四元组） location / API func
    # //     11.5 ^~ 前缀匹配 （五元组）location ^~ pattern API func
    # //     备注：为了更简洁方便地区分与静态资源服务器的区别，在func前需要加入关键字API，表示这是一个restful api请求



[Log]  # 读取日志的配置文件的相关信息
log_properties  = ../../config/log4cpp.properties   # 日志配置文件地址，采用log4cpp的格式编写

[Proc] # 进程相关信息
workers = 4  # 创建 worker进程 的数量
Daemon = 1   # 是否以守护进程运行，1表示守护进程，0表示非守护进程

[Socket] # 网络编程的相关信息，会根据PortNumber 来判断监听几个端口，会根据Port+i 来选择端口
PortNumber  = 2
Port1 = 8010
Port2 = 8011

Worker_connection = 256  # epoll 连接数量.这里影响着每个进程会创建多少个free_link节点，最多一次处理多少个kevent

[ThreadPool]
Thread_number = 10   # 线程池中的线程数量

[Static resource mapping and Restful API mapping] # 静态资源映射, 地址的最后不要加 '/'
{
    location = /404.html ./resource/static 
    location ~* .(js|css|png|ico|jpg|jpeg|gif|html|json|eot|svg|ttf|woff|txt|gz|mp3|mp4)$ ./code_statistics 
    
    location = /v1/test API TestController # restful api 请求

    #location ~* .(js|css|png|ico|jpg|jpeg|gif|html|json|eot|svg|ttf|woff|txt|gz|mp3|mp4)$ /Users/lxy/Desktop/mynginx/resource/static
    location / ./resource/static/others 
}

# [Restful API mapping]
# {
#     # @ /test  TestController  GET 
# }